***Should add all notes before page 86 above here***

Ch 4 Responsive layouts with Flexbox (starting at page 86)

Absolute vs Relative Positioning

Absolute positioning
- Place an element in an exact spot inside another element
- 3 Requirements:
  - 1. property positions: absolute
  - 2. coordinates: distance of edge of element to edge of its container
  - 3. ancestor element that has declared position property of either
       absolute or relative

Ch 5 Adaptive Layouts with Media Queries

- Call it adaptive layout b/c sometimes people get confused about the term responsive
- Recommended way is to write styles for smallest screen and then provide override styles
in media queries that are triggered when viewport is larger than set threshold
- Mobile browsers can have multiple viewports
  - layout/actual viewport
    - 980 pixels (not sure about this part)
  - visual viewport
    - what the user pinch and zoom on a page

Can tell the browser what you want as the default viewport for certain screens
- meta tag to do this
- this is the initial scale stuff you did for sapling mobile homework
- ideal viewport for the specific device that is recommended by browser maker
- Page 95 has a really good table to understand this


Device mode button in chrome dev tools

Media query
- group css declaration blocks
- if screen is X pixels wide, if screen is wider than is tall, if screen has high pixel density
- @media followed by conditions then { }
- media types
  - made to differentiate between devices (smart tv vs handheld)
  - browsers don't do a good job with this so almost always specify all


Phillip Walton's Flexbox resources
- Solved by Flexbox: philipwalton.github.io/solved-by-flexbox
- Flexbugs: github.com/philipwalton/flexbugs


CH 6 Handling Events with Javascript

Javascript adds functionality to websites by manipulating DOM elements and CSS styles on a page

ECMAScript Editions
- 3: December 1999
    - encompasses most of the language features you use
- 5: December 2009
    - backwards compatible
    - Opt in enhancements that prevent the usage of more error prone parts
- 6: June 2015
    - new syntax and language features
    - Can be translated into ES5
    - Not all browsers support it yet

Data attributes
- use them to refer to elements on page with Javascript
- need to start with data-
- better to use data- attributes with javascript and class elements with css to
keep things separated
- Use them to make queries about content of a web page --> get reference to element
- Can read, change attributes, change text, get access to elements around a reference
- Once make a change to an element, the browser updates the page immediately


Script after body because browser starts running it immediately. Won't be able to reference anything unless it is after.

Console
- Can directly write code into the console of DevTools


document
- object that corresponds to the entire page
- querySelector method with dot notation: document.querySelector

DOM: Document Object Model
- browsers internal representation of the an HTML document
- can interact with the DOM with the document object. Every HTML tag is an element (or really variable)
in the document object

Parameters vs Arguments
- parameters defined in the function
- arguments are what you pass the function when you use it
- think I've always used these terms interchangeably


Event listeners
- Available for every DOM element: addEventListener
- addEventListener
    - 2 arguments: String: name of event and function
    - anonymous function
- Get passed an event object by browser with data
    - this event object has a lot of data in it
    - Call the prevent default on it in our example to prevent page from opening
    a new page

Callback pattern
- Pass a function to another function
- function you pass to another function will get called back at some point
in the future


querySelectorAll
- like querySelector but gets......all of those items


forEach - array method to iterate over array and pass it a callback

Method to convert NodeList to array
- [].slice.call(leArray);
